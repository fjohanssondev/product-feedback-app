// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  feedback      Feedback[]
  Comment       Comment[]
  Vote          Vote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum FeedbackStatus {
  PLANNED
  IN_PROGRESS
  LIVE
  DONE
}

model Feedback {
  id          String         @id @default(cuid())
  title       String
  description String
  status      FeedbackStatus @default(PLANNED)
  tags        Tag[]
  comments    Comment[]
  votes       Vote[]
  author      User           @relation(fields: [authorId], references: [id])
  authorId    String
}

model Tag {
  id       String     @id @default(cuid())
  name     String
  feedback Feedback[]
}

model Comment {
  id         String    @id @default(cuid())
  content    String
  feedback   Feedback  @relation(fields: [feedbackId], references: [id])
  feedbackId String
  parent     Comment?  @relation("ChildComments", fields: [parentId], references: [id])
  parentId   String?
  children   Comment[] @relation("ChildComments")
  author     User      @relation(fields: [authorId], references: [id])
  authorId   String
}

model Vote {
  id         String   @id @default(cuid())
  feedback   Feedback @relation(fields: [feedbackId], references: [id])
  feedbackId String
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  value      Int
}
